"""
Django settings for mailware project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import json


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

MAILWARE_ENV = json.load(open(os.path.join(os.path.dirname(BASE_DIR), "mailware-env.json")))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'kri^w&+#rz=dh-ll&opl7lo1k4-t#(q9psg#v9q5+4=pu7_3v='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = MAILWARE_ENV["debug"]

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'guardian',
    'core',
    'frontend',
    'domains',
    'mail',
    'lists',
    'reports',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mailware.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mailware.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': MAILWARE_ENV["database"]["name"],
        'USER': MAILWARE_ENV["database"]["user"],
        'PASSWORD': MAILWARE_ENV["database"]["password"],
        'HOST': MAILWARE_ENV["database"]["host"],
        'PORT': MAILWARE_ENV["database"]["port"],
        'OPTIONS': MAILWARE_ENV["database"]["options"],
    }
}

# Caching
# https://docs.djangoproject.com/en/2.0/topics/cache/#database-caching
if DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'path.to.backend',
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'cache',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#AUTH_USER_MODEL = 'core.User'


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = MAILWARE_ENV["language_code"]

#TIME_ZONE = 'UTC'
TIME_ZONE = MAILWARE_ENV["time_zone"]

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/assets/'

if DEBUG:
    ASSETS_DIR = os.path.join(os.path.dirname(BASE_DIR), "assets")
    STATICFILES_DIRS = [
        os.path.join(ASSETS_DIR, "dist")
    ]


# REST Framework configuration
# http://www.django-rest-framework.org/#example
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'mailware.pagination.PageNumberPaginationWithPageCount',
    'PAGE_SIZE': 100
}

# Guardian Authentication backends
# https://django-guardian.readthedocs.io/en/stable/configuration.html#configuration
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend', # this is default
    'guardian.backends.ObjectPermissionBackend',
)

#MailWare specific settings
TMP_DIR = MAILWARE_ENV['hostconfig']['tmp_dir']
MTA = MAILWARE_ENV['mta']

#MailScanner settings
MAILSCANNER_BIN = MAILWARE_ENV["hostconfig"]["mailscanner_bin"]
MAILSCANNER_CONFIG_DIR = MAILWARE_ENV["hostconfig"]["mailscanner_config_dir"]
MAILSCANNER_SHARE_DIR = MAILWARE_ENV["hostconfig"]["mailscanner_share_dir"]
MAILSCANNER_LIB_DIR = MAILWARE_ENV["hostconfig"]["mailscanner_lib_dir"]

# SpamAssassin settings
SALEARN_BIN = MAILWARE_ENV['hostconfig']['salearn_bin']
SA_BIN = MAILWARE_ENV['hostconfig']['sa_bin']
SA_RULES_DIR = MAILWARE_ENV['hostconfig']['sa_rules_dir']

# Retention policy
RECORD_RETENTION = MAILWARE_ENV['retention']['records']
AUDIT_RETENTION = MAILWARE_ENV['retention']['audit']
QUARANTINE_RETENTION = MAILWARE_ENV['retention']['quarantine']
