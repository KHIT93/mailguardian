# Generated by Django 3.2.4 on 2021-07-13 18:26

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_cryptography.fields
import uuid

class Migration(migrations.Migration):

    replaces = [('core', '0001_initial'), ('core', '0002_auto_20180525_2128'), ('core', '0003_auto_20180527_0225'), ('core', '0004_auto_20180528_2039'), ('core', '0005_auto_20180607_0114'), ('core', '0006_auto_20180622_1517'), ('core', '0007_auto_20180622_1523'), ('core', '0008_auto_20180627_1943'), ('core', '0009_mailscannerhost'), ('core', '0010_auto_20180704_1953'), ('core', '0011_mailscannerhost_priority'), ('core', '0012_auto_20180714_1407'), ('core', '0013_applicationtask'), ('core', '0014_applicationnotification'), ('core', '0015_auto_20180829_2058'), ('core', '0016_twofactorconfiguration'), ('core', '0017_auto_20181018_1232'), ('core', '0018_auto_20181018_1234'), ('core', '0019_auto_20181023_1931'), ('core', '0020_auto_20181023_2041'), ('core', '0021_auto_20181106_1849'), ('core', '0022_auto_20181106_1911'), ('core', '0023_mailscannerhost_passive'), ('core', '0024_auto_20200807_1941'), ('core', '0025_auto_20200808_1930')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0009_alter_user_last_name_max_length'),
        ('domains', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_domain_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', core.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField(db_index=True, null=True, verbose_name='IP Address')),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('module', models.CharField(db_index=True, max_length=255)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('message', models.TextField()),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='MailScannerConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('filepath', models.CharField(default='/etc/MailScanner/MailScanner.conf', max_length=511)),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=255, unique=True)),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_settings',
                'ordering': ('key',),
            },
        ),
        migrations.CreateModel(
            name='SpamAssassinConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=255)),
                ('rule', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('filepath', models.CharField(default='/etc/MailScanner/spamassassin.conf', max_length=511)),
            ],
        ),
        migrations.AddIndex(
            model_name='spamassassinconfiguration',
            index=models.Index(fields=['key'], name='core_spamas_key_d924cc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='spamassassinconfiguration',
            unique_together={('key', 'value')},
        ),
        migrations.AddIndex(
            model_name='mailscannerconfiguration',
            index=models.Index(fields=['key'], name='core_mailsc_key_782e5e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mailscannerconfiguration',
            unique_together={('key', 'value')},
        ),
        migrations.AddField(
            model_name='user',
            name='domains',
            field=models.ManyToManyField(to='domains.Domain'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='daily_quarantine_report',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='user',
            name='monthly_quarantine_report',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='user',
            name='weekly_quarantine_report',
            field=models.BooleanField(default=False),
        ),
        migrations.DeleteModel(
            name='AuditLog',
        ),
        migrations.AddField(
            model_name='user',
            name='custom_spam_highscore',
            field=models.FloatField(default=15.0),
        ),
        migrations.AddField(
            model_name='user',
            name='custom_spam_score',
            field=models.FloatField(default=5.0),
        ),
        migrations.AddField(
            model_name='user',
            name='skip_scan',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='MailScannerHost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('hostname', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP Address')),
                ('use_tls', models.BooleanField(default=True, verbose_name='Use TLS')),
                ('priority', models.IntegerField(default=10, verbose_name='MX Priority')),
            ],
        ),
        migrations.AlterModelOptions(
            name='mailscannerconfiguration',
            options={'verbose_name': 'mailscanner configuration', 'verbose_name_plural': 'mailscanner configuration'},
        ),
        migrations.AlterModelOptions(
            name='mailscannerhost',
            options={'verbose_name': 'mailscanner host', 'verbose_name_plural': 'mailscanner hosts'},
        ),
        migrations.AlterModelOptions(
            name='setting',
            options={'ordering': ('key',), 'verbose_name': 'setting', 'verbose_name_plural': 'settings'},
        ),
        migrations.AlterModelOptions(
            name='spamassassinconfiguration',
            options={'verbose_name': 'SpamAssassin configuration', 'verbose_name_plural': 'SpamAssassin configuration'},
        ),
        migrations.AlterField(
            model_name='mailscannerconfiguration',
            name='filepath',
            field=models.CharField(default='/etc/MailScanner/MailScanner.conf', max_length=511, verbose_name='Filepath'),
        ),
        migrations.AlterField(
            model_name='mailscannerconfiguration',
            name='key',
            field=models.CharField(max_length=255, verbose_name='Key'),
        ),
        migrations.AlterField(
            model_name='mailscannerconfiguration',
            name='value',
            field=models.TextField(verbose_name='Value'),
        ),
        migrations.AlterField(
            model_name='mailscannerhost',
            name='hostname',
            field=models.CharField(max_length=255, verbose_name='Hostname'),
        ),
        migrations.AlterField(
            model_name='setting',
            name='key',
            field=models.CharField(max_length=255, unique=True, verbose_name='Key'),
        ),
        migrations.AlterField(
            model_name='setting',
            name='value',
            field=models.TextField(blank=True, null=True, verbose_name='Value'),
        ),
        migrations.AlterField(
            model_name='spamassassinconfiguration',
            name='filepath',
            field=models.CharField(default='/etc/MailScanner/spamassassin.conf', max_length=511, verbose_name='Filepath'),
        ),
        migrations.AlterField(
            model_name='spamassassinconfiguration',
            name='key',
            field=models.CharField(max_length=255, verbose_name='Key'),
        ),
        migrations.AlterField(
            model_name='spamassassinconfiguration',
            name='rule',
            field=models.CharField(max_length=255, verbose_name='Rule'),
        ),
        migrations.AlterField(
            model_name='spamassassinconfiguration',
            name='value',
            field=models.CharField(max_length=255, verbose_name='Value'),
        ),
        migrations.CreateModel(
            name='ApplicationNotification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=128, verbose_name='Title')),
                ('body', models.TextField(verbose_name='Body')),
                ('date_start', models.DateField(verbose_name='Starting on')),
                ('date_end', models.DateField(verbose_name='Ending on')),
                ('notification_type', models.CharField(choices=[('dashboard', 'Dashboard'), ('login', 'Login')], max_length=20, verbose_name='Notification type')),
            ],
            options={
                'ordering': ('-id',),
                'verbose_name': 'application notification',
                'verbose_name_plural': 'application notifications',
            },
        ),
        migrations.AlterModelOptions(
            name='user',
            options={'ordering': ('id',), 'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.AlterModelOptions(
            name='mailscannerhost',
            options={'ordering': ('hostname', 'ip_address'), 'verbose_name': 'mailscanner host', 'verbose_name_plural': 'mailscanner hosts'},
        ),
        migrations.AddField(
            model_name='mailscannerhost',
            name='passive',
            field=models.BooleanField(default=0, verbose_name='Passive host'),
        ),
        migrations.CreateModel(
            name='TwoFactorBackupCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', django_cryptography.fields.encrypt(models.CharField(max_length=255, verbose_name='Two Factor Backup Code'))),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'two factor backup code',
                'verbose_name_plural': 'two factor backup codes',
            },
        ),
        migrations.CreateModel(
            name='TwoFactorConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('totp_key', django_cryptography.fields.encrypt(models.CharField(max_length=255, verbose_name='Timebased Onetime Password Key'))),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'two factor configuration',
                'verbose_name_plural': 'two factor configuration',
            },
        ),
        migrations.CreateModel(
            name='ApplicationTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('updated', models.DateTimeField(null=True, verbose_name='Last updated on')),
                ('completed', models.DateTimeField(null=True, verbose_name='Completed')),
                ('status_code', models.CharField(blank=True, choices=[('QUEUED', 'queued'), ('RUNNING', 'running'), ('FAILED', 'failed'), ('COMPLETED', 'completed')], default='QUEUED', max_length=255, verbose_name='Status code')),
                ('status_message', models.TextField(blank=True, null=True, verbose_name='Status message')),
                ('object_pk', models.CharField(db_index=True, max_length=255, verbose_name='object primary key')),
                ('method', models.CharField(max_length=255, verbose_name='method')),
                ('params', models.JSONField(blank=True, null=True, verbose_name='parameters')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype', verbose_name='content type')),
                ('host', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.mailscannerhost', verbose_name='Host')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'application task',
                'verbose_name_plural': 'application tasks',
            },
        ),
    ]
