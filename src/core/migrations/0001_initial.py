# Generated by Django 2.0.5 on 2018-05-15 10:53

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('domains', '__first__'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_domain_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', core.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField(db_index=True, null=True, verbose_name='IP Address')),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('module', models.CharField(db_index=True, max_length=255)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('message', models.TextField()),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='MailScannerConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('filepath', models.CharField(default='/etc/MailScanner/MailScanner.conf', max_length=511)),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=255, unique=True)),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_settings',
                'ordering': ('key',),
            },
        ),
        migrations.CreateModel(
            name='SpamAssassinConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=255)),
                ('rule', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('filepath', models.CharField(default='/etc/MailScanner/spamassassin.conf', max_length=511)),
            ],
        ),
        migrations.AddIndex(
            model_name='spamassassinconfiguration',
            index=models.Index(fields=['key'], name='core_spamas_key_d924cc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='spamassassinconfiguration',
            unique_together={('key', 'value')},
        ),
        migrations.AddIndex(
            model_name='mailscannerconfiguration',
            index=models.Index(fields=['key'], name='core_mailsc_key_782e5e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mailscannerconfiguration',
            unique_together={('key', 'value')},
        ),
        migrations.AddField(
            model_name='auditlog',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='domains',
            field=models.ManyToManyField(to='domains.Domain'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
